/* This work has been placed into the public domain. */

package kiyut.alkitab.swing;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import kiyut.swing.dialog.DialogESC;
import kiyut.swing.text.xml.XMLContext;
import kiyut.swing.text.xml.XMLEditorKit;

/**
 * Display the OSIS and HTML source for the the book
 * 
 */
public class SourceCodePane extends javax.swing.JPanel {
    
    protected ResourceBundle bundle = ResourceBundle.getBundle(this.getClass().getName());    
    
    /** Creates new SourceCodePane */
    public SourceCodePane() {
        initComponents();
        initCustom();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        rawEditorPane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        osisEditorPane = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        htmlEditorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(rawEditorPane);

        jTabbedPane1.addTab(bundle.getString("CTL_Raw.Text"), jScrollPane1); // NOI18N

        jScrollPane2.setViewportView(osisEditorPane);

        jTabbedPane1.addTab(bundle.getString("CTL_OSIS.Text"), jScrollPane2); // NOI18N

        jScrollPane3.setViewportView(htmlEditorPane);

        jTabbedPane1.addTab(bundle.getString("CTL_HTML.Text"), jScrollPane3); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane htmlEditorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JEditorPane osisEditorPane;
    private javax.swing.JEditorPane rawEditorPane;
    // End of variables declaration//GEN-END:variables
    
    protected void initCustom() {
        Dimension size = new Dimension(780,540);
        this.setPreferredSize(size);

        //XXX workaround for Linux GTK lnf JEditorPane.setEditable(false) background color
        Color background = osisEditorPane.getBackground();
        try {
            if (!System.getProperty("os.name").toLowerCase().startsWith("windows")) {
                Color color = UIManager.getColor("TextPane.background");
                if (color != null) {
                    if (!color.equals(getBackground())) {
                        background = color;
                    }
                }
            }
        } catch (Exception ex) {
            Logger logger = Logger.getLogger(this.getClass().getName());
            logger.log(Level.CONFIG,ex.getMessage(),ex);
        }

        int fontSize = 10;
        try {
            int dpi = Toolkit.getDefaultToolkit().getScreenResolution();
            fontSize = (int)Math.round((double)fontSize * dpi / 72.0);
            
            /*Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            if (size.width >= 1280 || size.height >= 1024) {
                fontSize = 13;
            }*/
        } catch (Exception ex) {
            Logger logger = Logger.getLogger(this.getClass().getName());
            logger.log(Level.CONFIG,ex.getMessage(),ex);
        }

        Font font = new Font("Monospaced", Font.PLAIN, fontSize);

        rawEditorPane.setEditable(false);
        rawEditorPane.setBackground(background);

        XMLContext ctx = new XMLContext(font);
        XMLEditorKit kit = new XMLEditorKit(ctx);
        osisEditorPane.setEditorKitForContentType(XMLEditorKit.XML_MIME_TYPE, kit);
        osisEditorPane.setContentType(XMLEditorKit.XML_MIME_TYPE);
        osisEditorPane.setEditable(false);
        osisEditorPane.setBackground(background);

        ctx = new XMLContext(font);
        kit = new XMLEditorKit(ctx);
        htmlEditorPane.setEditorKitForContentType(XMLEditorKit.XML_MIME_TYPE, kit);
        htmlEditorPane.setContentType(XMLEditorKit.XML_MIME_TYPE);
        htmlEditorPane.setEditable(false);
        htmlEditorPane.setBackground(background);
    }
    
    /** Show as Dialog 
     * @param owner {@code Component}
     */
    public void showDialog(Component owner, boolean modal) {
        JDialog dialog = null;
        
        if (owner != null) {
            Component comp = owner;
            if (!(comp instanceof Frame || comp instanceof Dialog)) {
                comp = SwingUtilities.getWindowAncestor(owner);
            }
            if (comp instanceof Frame) {
                dialog = new DialogESC((Frame)comp, bundle.getString("CTL_Title.Text"), true);
            } else if (comp instanceof Dialog) {
                dialog = new DialogESC((Dialog)comp, bundle.getString("CTL_Title.Text"), true);
            } 
        }
        
        dialog.setLayout(new BorderLayout());
        dialog.add(this,BorderLayout.CENTER);
        dialog.pack();
        if (owner != null) {
            dialog.setLocationRelativeTo(owner);
        }
        
        dialog.setVisible(true);
    }
    
    /** Setting the text to be displayed 
     * @param raw the raw text
     * @param osis the OSIS text
     * @param html the HTML text
     */
    public void setText(String raw, String osis, String html) {
        rawEditorPane.setText(raw);
        osisEditorPane.setText(osis);
        htmlEditorPane.setText(html);
        
        rawEditorPane.setCaretPosition(0);
        osisEditorPane.setCaretPosition(0);
        htmlEditorPane.setCaretPosition(0);
    }
}
