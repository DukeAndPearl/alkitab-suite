/* This work has been placed into the public domain. */

package kiyut.alkitab.options;

import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.SwingUtilities;
import kiyut.alkitab.api.BookFontStore;
import kiyut.alkitab.util.ComponentOrientationSupport;
import kiyut.alkitab.util.SwordUtilities;
import kiyut.swing.combo.SeparatorComboBox;
import org.crosswire.common.swing.GuiConvert;
import org.crosswire.jsword.book.Book;
import org.crosswire.jsword.book.BookFilters;
import org.crosswire.jsword.book.Books;

final class GeneralOptionsPanel extends javax.swing.JPanel {

    private final GeneralOptionsPanelController controller;
    private ResourceBundle bundle = ResourceBundle.getBundle(this.getClass().getName());

    GeneralOptionsPanel(GeneralOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        initCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sessionPersistenceGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sessionPersistenceDisabledRadio = new javax.swing.JRadioButton();
        sessionPersistenceEnabledRadio = new javax.swing.JRadioButton();
        parallelBookLimitComboBox = new javax.swing.JComboBox();
        versesPerTabComboBox = new javax.swing.JComboBox();
        defaultSearchLimitComboBox = new javax.swing.JComboBox();
        fontComboBox =  new SeparatorComboBox();
        fontSizeComboBox = new javax.swing.JComboBox();
        fontBoldCheckBox = new javax.swing.JCheckBox();
        fontItalicCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        defaultBibleComboBox = new javax.swing.JComboBox();
        defaultDictionaryComboBox = new javax.swing.JComboBox();
        defaultDailyDevotionsComboBox = new javax.swing.JComboBox();
        defaultGreekStrongsComboBox = new javax.swing.JComboBox();
        defaultHebrewStrongsComboBox = new javax.swing.JComboBox();
        defaultGreekMorphComboBox = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, bundle.getString("CTL_SessionPersistence.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, bundle.getString("CTL_ParallelLimit.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, bundle.getString("CTL_VerseLimit.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, bundle.getString("CTL_SearchLimit.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, bundle.getString("CTL_Font.Text")); // NOI18N

        sessionPersistenceGroup.add(sessionPersistenceDisabledRadio);
        org.openide.awt.Mnemonics.setLocalizedText(sessionPersistenceDisabledRadio, bundle.getString("CTL_Disabled.Text")); // NOI18N

        sessionPersistenceGroup.add(sessionPersistenceEnabledRadio);
        org.openide.awt.Mnemonics.setLocalizedText(sessionPersistenceEnabledRadio, bundle.getString("CTL_Enabled.Text")); // NOI18N

        parallelBookLimitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        versesPerTabComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "25", "50", "75", "100", "125", "150", "176", "200" }));

        defaultSearchLimitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "unlimited", "10", "20", "30", "40", "50", "75", "100", "125", "150", "175", "200" }));

        fontComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "some font1", "some font2", "some font3" }));

        fontSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "9", "10", "11", "12", "13", "14", "15", "16", "18", "20", "22", "24", "26", "28", "32", "36", "40", "44", "48" }));

        org.openide.awt.Mnemonics.setLocalizedText(fontBoldCheckBox, bundle.getString("CTL_FontBold.Tex")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fontItalicCheckBox, bundle.getString("CTL_FontItalic.Text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(fontBoldCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fontItalicCheckBox))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(sessionPersistenceDisabledRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sessionPersistenceEnabledRadio))
                            .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(parallelBookLimitComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(versesPerTabComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(defaultSearchLimitComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(197, 197, 197))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(sessionPersistenceDisabledRadio)
                    .addComponent(sessionPersistenceEnabledRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parallelBookLimitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versesPerTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defaultSearchLimitComboBox)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel4)
                    .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontBoldCheckBox)
                    .addComponent(fontItalicCheckBox))
                .addGap(20, 20, 20))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, bundle.getString("CTL_DefaultBook.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, bundle.getString("CTL_DefaultBible.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, bundle.getString("CTL_DefaultDictionary.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, bundle.getString("CTL_DefaultDailyDevotions.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, bundle.getString("CTL_DefaultGreekDefinition.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, bundle.getString("CTL_DefaultHebrewDefinition.Text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, bundle.getString("CTL_DefaultGreekMorph.Text")); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defaultBibleComboBox, 0, 342, Short.MAX_VALUE)
                    .addComponent(defaultGreekMorphComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 342, Short.MAX_VALUE)
                    .addComponent(defaultDictionaryComboBox, 0, 342, Short.MAX_VALUE)
                    .addComponent(defaultDailyDevotionsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 342, Short.MAX_VALUE)
                    .addComponent(defaultGreekStrongsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 342, Short.MAX_VALUE)
                    .addComponent(defaultHebrewStrongsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 342, Short.MAX_VALUE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(defaultBibleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(defaultDictionaryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(defaultDailyDevotionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(defaultGreekStrongsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(defaultHebrewStrongsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(defaultGreekMorphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        BookViewerOptions bookViewerOpts = BookViewerOptions.getInstance();

        parallelBookLimitComboBox.setSelectedItem(Integer.toString(bookViewerOpts.getParallelBookLimit()));
        versesPerTabComboBox.setSelectedItem(Integer.toString(bookViewerOpts.getVersesLimit()));
        defaultSearchLimitComboBox.setSelectedItem(Integer.toString(bookViewerOpts.getDefaultSearchLimit()));

        if (bookViewerOpts.isSessionPersistence()) {
            sessionPersistenceEnabledRadio.setSelected(true);
        } else {
            sessionPersistenceDisabledRadio.setSelected(true);
        }
        //sessionPersistenceEnabledRadio.setSelected(bookViewerOpts.isSessionPersistence());
        //System.out.println("SessionPersist: " + bookViewerOpts.isSessionPersistence() + " radio: " + sessionPersistenceEnabledRadio.isSelected());

        setDefaultBookComboBox(defaultBibleComboBox, bookViewerOpts.getDefaultBible());
        setDefaultBookComboBox(defaultDictionaryComboBox, bookViewerOpts.getDefaultDictionary());
        setDefaultBookComboBox(defaultDailyDevotionsComboBox, bookViewerOpts.getDefaultDailyDevotions());
        setDefaultBookComboBox(defaultGreekStrongsComboBox, bookViewerOpts.getDefaultGreekStrongs());
        setDefaultBookComboBox(defaultHebrewStrongsComboBox, bookViewerOpts.getDefaultHebrewStrongs());
        setDefaultBookComboBox(defaultGreekMorphComboBox, bookViewerOpts.getDefaultGreekMorph());

        BookFontStore fontStore = BookFontStore.getInstance();
        String fontDef = fontStore.getDefaultFont();
        Font font = GuiConvert.string2Font(fontDef);
        fontComboBox.setSelectedItem(font.getName());
        fontSizeComboBox.setSelectedItem(font.getSize()+"");
        fontBoldCheckBox.setSelected(font.isBold());
        fontItalicCheckBox.setSelected(font.isItalic());
    }

    void store() {
        BookViewerOptions bookViewerOpts = BookViewerOptions.getInstance();
        bookViewerOpts.setParallelBookLimit(Integer.parseInt(parallelBookLimitComboBox.getSelectedItem().toString()));
        bookViewerOpts.setVersesLimit(Integer.parseInt(versesPerTabComboBox.getSelectedItem().toString()));
        if (defaultSearchLimitComboBox.getSelectedIndex() == 0) {
            // unlimited
            bookViewerOpts.setDefaultSearchLimit(0);
        } else {
            bookViewerOpts.setDefaultSearchLimit(Integer.parseInt(defaultSearchLimitComboBox.getSelectedItem().toString()));
        }

        bookViewerOpts.setSessionPersistence(sessionPersistenceEnabledRadio.isSelected());

        String initials = null;
        if (defaultBibleComboBox.getSelectedIndex() > 0) {
            initials = defaultBibleComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            //System.out.println(initials + "TEST");
            bookViewerOpts.setDefaultBible(initials);
        } else {
            bookViewerOpts.setDefaultBible(null);
        }

        if (defaultDictionaryComboBox.getSelectedIndex() > 0) {
            initials = defaultDictionaryComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            bookViewerOpts.setDefaultDictionary(initials);
        } else {
            bookViewerOpts.setDefaultDictionary(null);
        }

        if (defaultDailyDevotionsComboBox.getSelectedIndex() > 0) {
            initials = defaultDailyDevotionsComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            bookViewerOpts.setDefaultDailyDevotions(initials);
        } else {
            bookViewerOpts.setDefaultDailyDevotions(null);
        }

        if (defaultGreekStrongsComboBox.getSelectedIndex() > 0) {
            initials = defaultGreekStrongsComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            bookViewerOpts.setDefaultGreekStrongs(initials);
        } else {
            bookViewerOpts.setDefaultGreekStrongs(null);
        }

        if (defaultHebrewStrongsComboBox.getSelectedIndex() > 0) {
            initials = defaultHebrewStrongsComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            bookViewerOpts.setDefaultHebrewStrongs(initials);
        } else {
            bookViewerOpts.setDefaultHebrewStrongs(null);
        }

        if (defaultGreekMorphComboBox.getSelectedIndex() > 0) {
            initials = defaultGreekMorphComboBox.getSelectedItem().toString();
            initials = initials.substring(0,initials.indexOf('-') - 1);
            bookViewerOpts.setDefaultGreekMorph(initials);
        } else {
            bookViewerOpts.setDefaultGreekMorph(null);
        }

        // default font stuff
        int style = Font.PLAIN;
        style = fontBoldCheckBox.isSelected() ? style | Font.BOLD : style;
        style = fontItalicCheckBox.isSelected() ? style | Font.ITALIC : style;
        int size = Integer.parseInt(fontSizeComboBox.getSelectedItem().toString());
        Font font = new Font(fontComboBox.getSelectedItem().toString(), style, size);

        BookFontStore fontStore = BookFontStore.getInstance();
        fontStore.setDefaultFont(GuiConvert.font2String(font));
        //System.out.println(fontDefs + "   TEST ONLY");

        bookViewerOpts.store();
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox defaultBibleComboBox;
    private javax.swing.JComboBox defaultDailyDevotionsComboBox;
    private javax.swing.JComboBox defaultDictionaryComboBox;
    private javax.swing.JComboBox defaultGreekMorphComboBox;
    private javax.swing.JComboBox defaultGreekStrongsComboBox;
    private javax.swing.JComboBox defaultHebrewStrongsComboBox;
    private javax.swing.JComboBox defaultSearchLimitComboBox;
    private javax.swing.JCheckBox fontBoldCheckBox;
    private javax.swing.JComboBox fontComboBox;
    private javax.swing.JCheckBox fontItalicCheckBox;
    private javax.swing.JComboBox fontSizeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JComboBox parallelBookLimitComboBox;
    private javax.swing.JRadioButton sessionPersistenceDisabledRadio;
    private javax.swing.JRadioButton sessionPersistenceEnabledRadio;
    private javax.swing.ButtonGroup sessionPersistenceGroup;
    private javax.swing.JComboBox versesPerTabComboBox;
    // End of variables declaration//GEN-END:variables

    private void initCustom() {
        fontComboBox.setModel(new DefaultComboBoxModel());
        defaultBibleComboBox.setModel(new DefaultComboBoxModel());
        defaultDictionaryComboBox.setModel(new DefaultComboBoxModel());
        defaultDailyDevotionsComboBox.setModel(new DefaultComboBoxModel());

        fontSizeComboBox.setPrototypeDisplayValue("99");

        refreshAvailableFonts();
        refreshDefaultBooks();

        // XXX workaround for NbPlatform OptionsDialog component orientation
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent evt) {
                Window parent = SwingUtilities.getWindowAncestor(GeneralOptionsPanel.this);
                ComponentOrientation cOrient = ComponentOrientationSupport.getComponentOrientation();
                if (!cOrient.equals(parent.getComponentOrientation())) {
                    ComponentOrientationSupport.applyComponentOrientation(parent);
                    parent.invalidate();
                    parent.validate();
                    parent.repaint();
                }
            }
        });
    }

    /** Refresh available fonts */
    private void refreshAvailableFonts() {
        DefaultComboBoxModel model = (DefaultComboBoxModel)fontComboBox.getModel();
        model.removeAllElements();

        // add generic font family
        model.addElement("serif");
        model.addElement("sans-serif");
        model.addElement("monospace");
        model.addElement("cursive");
        model.addElement("fantasy");
        model.addElement(SeparatorComboBox.DEFAULT_SEPARATOR);

        String fontList[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        for ( int i = 0; i < fontList.length; i++ ) {
            model.addElement(fontList[i]);
        }
    }

    /** Refresh default books {@code JComboBox} */
    @SuppressWarnings("unchecked")
    private void refreshDefaultBooks() {
        Comparator<Book> comparator = SwordUtilities.getBookInitialsComparator();
        List<Book> books = new ArrayList<Book>();

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getOnlyBibles()));
        refreshDefaultBookComboBox(defaultBibleComboBox,books,comparator);

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getDictionaries()));
        refreshDefaultBookComboBox(defaultDictionaryComboBox,books,comparator);

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getDailyDevotionals()));
        refreshDefaultBookComboBox(defaultDailyDevotionsComboBox,books,comparator);

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getGreekDefinitions()));
        refreshDefaultBookComboBox(defaultGreekStrongsComboBox,books,comparator);

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getHebrewDefinitions()));
        refreshDefaultBookComboBox(defaultHebrewStrongsComboBox,books,comparator);

        books.clear();
        books.addAll(Books.installed().getBooks(BookFilters.getGreekParse()));
        refreshDefaultBookComboBox(defaultGreekMorphComboBox,books,comparator);
    }


    /** Refresh Default Book ComboBox
     * @param comboBox the {@code JComboBox} to be refreshed
     * @param books the list of books which is used to refresh
     * @param comparator the {@code Comparator} for books order or null
     */
    @SuppressWarnings("unchecked")
    private void refreshDefaultBookComboBox(JComboBox comboBox, List<Book> books, Comparator comparator) {
        if (comparator != null) {
            Collections.sort(books, comparator);
        }
        DefaultComboBoxModel model = (DefaultComboBoxModel)comboBox.getModel();
        model.removeAllElements();
        model.addElement("None");
        for (int i=0; i<books.size(); i++) {
            model.addElement(books.get(i).getInitials() + " - " + books.get(i).getName());
        }
    }

    private void setDefaultBookComboBox(JComboBox comboBox, String name) {
        if (name == null) { return; }

        int index = -1;

        ComboBoxModel model = comboBox.getModel();
        for (int i=0; i<model.getSize();i++) {
            Object obj = model.getElementAt(i);
            if ((obj == null)) { continue; }
            if (!(obj instanceof String)) { continue; }
            if (obj.toString().startsWith(name)) {
                index = i;
                break;
            }
        }

        if (index >= 0) {
            comboBox.setSelectedIndex(index);
        }
    }
}
